var variables = new Array();
var allClasses = new Array();
var rb_keywords = [
                  "alias", "and", "BEGIN", "begin", "break", "case", "class", "def", "defined?", "do", "else",
                  "elsif", "END", "end", "ensure", "false", "for", "if", "in", "module", "next", "not", "or",
                  "redo", "rescue", "retry", "return", "self", "super", "then", "true", "undef", "unless",
                  "until", "when", "while", "yield", "nil", "raise", "throw", "catch", "fail", "loop", "callcc",
                  "caller", "lambda", "proc", "public", "protected", "private", "require", "load",
                  "require_relative", "extend", "autoload"
                  ];
var rb_builtinfunction = ["abort","Array","at_exit","binding","block_given?","chomp","chomp!","chop","chop!","eval","exec","exit","exit!","Float",
                         "fork","format","gets","global_variables","gsub","gsub!","Integer","local_variables","open","p","print","printf","putc","puts",
                         "rand","readline","readlines","scan","select","set_trace_func","sleep","split",
                         "sprintf","srand","String","syscall","system","sub","sub!","test","trap","trace_var",
                         "untrace_var"];
var rb_functionfornumbers = ["coerce","divmod","floor","integer?","modulo","nonzero?","remainder","round","truncate","zero?","chr","succ","size","step","times","to_f","to_int"];

var rb_functionforfloat = ["induced_from","finite?","infinite?","nan?"];
var rb_functionformath=["atan2","cos","exp","frexp","ldexp","log","log10","sin","sqrt","tan"];


var rb_comment = {
"alias":"Ruby keyword",
"and":"Ruby keyword",
"BEGIN":"Ruby keyword",
"begin":"Ruby keyword ",
"break":"Ruby keyword ",
"case":"Ruby keyword ",
"class":"Ruby keyword ",
"def":"Ruby keyword ",
"defined?":"Ruby keyword ",
"do":"Ruby keyword ",
"else":"Ruby keyword ",
"elsif":"Ruby keyword ",
"END":"Ruby keyword ",
"end":"Ruby keyword ",
"ensure":"Ruby keyword ",
"false":"Ruby keyword ",
"for":"Ruby keyword ", 
"if":"Ruby keyword ",
"in":"Ruby keyword ",
"module":"Ruby keyword ",
"next":"Ruby keyword ",
"not":"Ruby keyword ",
"or":"Ruby keyword ",
"redo": "Ruby keyword ",
"rescue":"Ruby keyword ",
"retry":"Ruby keyword ", 
"return":"Ruby keyword ",
"self":"Ruby keyword ",
"super":"Ruby keyword ",
"then":"Ruby keyword ",
"true":"Ruby keyword ",
"undef":"Ruby keyword ", 
"unless":"Ruby keyword ",
"until":"Ruby keyword ",
"when":"Ruby keyword ",
"while":"Ruby keyword ",
"yield":"Ruby keyword ",
"nil":"Ruby keyword ", 
"raise":"raise(...)\nfail(...)\nRaises an exception. Assumes RuntimeError if no exception class is specified. Calling raise without arguments in a rescue clause re-raises the exception. Doing so outside a rescue clause raises a message-less RuntimeError. fail is an obsolete name for raise. ", 
"throw":"throw (tag[,value=nil])\nJumps to the catch function waiting with the symbol or string tag. value is the return value to be used by catch. ", 
"catch":"catch( tag) {...}\nCatches a nonlocal exit by a throw called during the execution of its block ", 
"loop":"loop {â€¦}\nRepeats a block of code. ", 
"callcc":"callcc {| c|...}\nPasses a Continuation object c to the block and executes the block. callcc can be used for global exit or loop construct. ",
"caller":"caller([ n])\nReturns the current execution stack in an array of the strings in the form file:line. If n is specified, returns stack entries from nth level on down. ", 
"lambda":"Converts a block into a Proc object. If no block is specified, the block associated with the calling method is converted. ", 
"proc":"Converts a block into a Proc object. If no block is specified, the block associated with the calling method is converted. ", 
"public":"Ruby keyword ", 
"protected":"Ruby keyword ", 
"private":"Ruby keyword ", 
"require":"require (lib)\nLoads the library (including extension libraries) lib when it's first called. require will not load the same library more than once. If no extension is specified in lib, require tries to add .rb,.so, etc., to it. ", 
"load":"load (file[, private=false])\nLoads a Ruby program from file. Unlike require, it doesn't load extension libraries. If private is true, the program is loaded into an anonymous module, thus protecting the namespace of the calling program. ",
"require_relative":"Ruby keyword ", 
"extend":"Ruby keyword ", 
"autoload":"autoload (classname, file)\nRegisters a class classname to be loaded from file the first time it's used. classname may be a string or a symbol.",
"abort":"abort\nTerminates program. If an exception is raised, its error message is displayed.", 
"Array": "Array (obj)\nReturns obj after converting it to an array using to_ary or to_a.", 
"at_exit": "at_exit \{...\}\nRegisters a block for execution when the program exits. Similar to END statement, but END statement registers the block only once. " ,
"binding": "binding\nReturns the current variable and method bindings. The Binding object that is returned may be passed to the eval method as its second argument.",
"block_given?":"block_given?\nReturns true if the method was called with a block.",
"chomp": "chomp ([rs=$/])\nReturns the value of variable $_ with the ending newline removed, assigning the result back to $_. The value of the newline string can be specified with rs. ",
"chomp!":"chomp!([ rs=$/])\nRemoves newline from $_, modifying the string in place. ",
"chop":"chop\nReturns the value of $_ with its last character (one byte) removed, assigning the result back to $_. ",
"chop!":"chop!\nRemoves the last character from $_, modifying the string in place. ",
"eval":"eval (str[,scope[,file,line]])\nExecutes str as Ruby code. The binding in which to perform the evaluation may be specified with scope. The filename and line number of the code to be compiled may be specified using file and line. ",
"exec":"exec (cmd[,arg...])\nReplaces the current process by running the command cmd. If multiple arguments are specified, the command is executed with no shell expansion. ",
"exit":"exit ([result=0])\nExits program, with result as the status code returned. ",
"exit!":"exit! ([result=0])\nKills the program bypassing exit handling such as ensure, etc. ",
"Float":"Float (obj)\nReturns obj after converting it to a float. Numeric objects are converted directly; nil is converted to 0.0; strings are converted considering 0x, 0b radix prefix. The rest are converted using obj.to_f. ",
"fork":"fork\nfork {...}\nCreates a child process. nil is returned in the child process and the child process\' ID (integer) is returned in the parent process. If a block is specified, it\'s run in the child process. ",
"format":"format( fmt[, arg...])\nSee sprintf.",
"gets":"gets ([rs=$/])\nReads the filename specified in the command line or one line from standard input. The record separator string can be specified explicitly with rs. ",
"global_variables":"global_variables\nReturns an array of global variable names. ",
"gsub":"gsub (x, y)\ngsub( x) {...}\nReplaces all strings matching x in $_ with y. If a block is specified, matched strings are replaced with the result of the block. The modified result is assigned to $_. ",
"gsub!":"gsub! (x, y)\ngsub!( x) {...}\nPerforms the same substitution as gsub, except the string is changed in place.",
"Integer":"Integer (obj)\nReturns obj after converting it to an integer. Numeric objects are converted directly; nil is converted to 0; strings are converted considering 0x, 0b radix prefix. The rest are converted using obj.to_i. ",
"local_variables":"local_variables\nReturns an array of local variable names. ",
"open":"open (path[,mode=\"r\"])\nopen( path[, mode=\"r\"]) {|f|...}\nOpens a file. If a block is specified, the block is executed with the opened stream passed as an argument. The file is closed automatically when the block exits. If path begins with a pipe |, the following string is run as a command, and the stream associated with that process is returned.",
"p":"p (obj)\nDisplays obj using its inspect method (often used for debugging). ",
"print":"print ([arg...])\nPrints arg to $defout. If no arguments are specified, the value of $_ is printed. ",
"printf":"printf (fmt[, arg...])\nFormats arg according to fmt using sprintf and prints the result to $defout. For formatting specifications, see sprintf for detail. ",
"putc":"putc (c)\nPrints one character to the default output ($defout). ",
"puts":"puts ([str])\nPrints string to the default output ($defout). If the string doesn't end with a newline, a newline is appended to the string. ",
"fail":"fail(...)\nSee raise(...) ",
"rand":"rand ([max=0])\nGenerates a pseudo-random number greater than or equal to 0 and less than max. If max is either not specified or is set to 0, a random number is returned as a floating-point number greater than or equal to 0 and less than 1. srand may be used to initialize  ",
"readline":"readline ([rs=$/])\nEquivalent to gets except it raises an EOFError exception on reading EOF. ",
"readlines":"readlines ([rs=$/])\nReturns an array of strings holding either the filenames specified as command-line arguments or the contents of standard input. ",
"scan":"scan (re)\nscan (re) {|x|...}\nEquivalent to $_.scan. ",
"select":"select (reads[, writes=nil[, excepts=nil[, timeout=nil]]])\nChecks for changes in the status of three types of IO objects input, output, and exceptions which are passed as arrays of IO objects. nil is passed for arguments that don't need checking. A three-element array containing arrays of the IO objects for which there were changes in status is returned. nil is returned on timeout. ",
"set_trace_func":"set_trace_func (proc)\nSets a handler for tracing. proc may be a string or proc object. set_trace_func is used by the debugger and profiler. ",
"sleep":"sleep ([sec])\nSuspends program execution for sec seconds. If sec isn't specified, the program is suspended forever. ",
"split":"split ([sep[,max]])\nEquivalent to $_.split. ",
"sprintf":"sprintf( fmt[,arg...])\nformat(fmt[, arg...])\nReturns a string in which arg is formatted according to fmt. Formatting specifications are essentially the same as those for sprintf in the C programming language. Conversion specifiers (% followed by conversion field specifier) in fmt are replaced by formatted string of corresponding argument. A list of conversion filed is given below in next section. ",
"srand":"srand ([seed])\nInitializes an array of random numbers. If seed isn't specified, initialization is performed using the time and other system information for the seed. ",
"String":"String (obj)\nReturns obj after converting it to a string using obj.to_s. ",
"syscall":"syscall (sys[,arg...])\nCalls an operating system call function specified by number sys. The numbers and meaning of sys is system-dependant.",
"system":"system (cmd[,arg...])\nExecutes cmd as a call to the command line. If multiple arguments are specified, the command is run directly with no shell expansion. Returns true if the return status is 0 (success).",
"sub":"subã€€(x, y)\nsub( x) {â€¦}\nReplaces the first string matching x in $_ with y. If a block is specified, matched strings are replaced with the result of the block. The modified result is assigned to $_.",
"sub!":"sub! (x,y)\nsub! (x) {...}\nPerforms the same replacement as sub, except the string is changed in place. ",
"test":"test (test,f1[,f2])\nPerforms various file tests specified by the character test. In order to improve readability, you should use File class methods (for example File::readable?) rather than this function. A list of arguments is given below in next section.",
"trap":"trap (sig,cmd)\ntrap (sig) {...}\nSets a signal handler. sig may be a string (like SIGUSR1) or an integer. SIG may be omitted from signal name. Signal handler for EXIT signal or signal number 0 is invoked just before process termination. ",
"trace_var":"trace_var (var,cmd)\ntrace_var (var) {...}\nSets tracing for a global variable. The variable name is specified as a symbol. cmd may be a string or Proc object. ",
"untrace_var":"untrace_var (var[,cmd])\nRemoves tracing for a global variable. If cmd is specified, only that command is removed. ",
"coerce": "n.coerce (num)\nReturns an array containing num and n both possibly converted to a type that allows them to be operated on mutually. Used in automatic type conversion in numeric operators.",
"divmod": "n.divmod( num)\nReturns an array containing the quotient and modulus from dividing n by num.",
"floor": "n.floor\nReturns the largest integer less than or equal to n. ",
"integer?":"n.integer?\nReturns true if n is an integer. ",
"modulo":"n.modulo (num)\nReturns the modulus obtained by dividing n by num and rounding the quotient with floor ",
"nonzero?":"n.nonzero?\nReturns n if it isn't zero, otherwise nil. ",
"remainder":"n.remainder (num)\nReturns the remainder obtained by dividing n by num and removing decimals from the quotient. The result and n always have same sign. ",
"round":"n.round\nReturns n rounded to the nearest integer. ",
"truncate":"n.truncate\nReturns n as an integer with decimals removed. ",
"zero?":"n.zero?\nReturns zero if n is 0. ",
"chr":"n.chr\nReturns a string containing the character for the character code n ",
"succ":"n.succ\nReturns the next integer following n. Equivalent to n + 1. ",
"size":"n.size\nReturns the number of bytes in the machine representation of n ",
"step":"n.step (upto, step) {|n| ...}\nIterates the block from n to upto, incrementing by step each time. ",
"times":"n.times {|n|...}\nIterates the block n times. ",
"to_f":"n.to_f\nConverts n into a floating point number. Float conversion may lose precision information. ",
"to_int":"n.to_int\nReturns n after converting into interger number. ",
"induced_from":"Float::induced_from(num)\nReturns the result of converting num to a floating-point number. ",
"finite?":"f.finite?\nReturns true if f isn't infinite and f.nan is false. ",
"infinite?":"f.infinite?\nReturns 1 if f is positive infinity, -1 if negative infinity, or nil if anything else. ",
"nan?":"f.nan?\nReturns true if f isn't a valid IEEE floating point number. ",
"atan2":"atan2 (x, y)\nCalculates the arc tangent. ",
"cos":"cos (x)\nCalculates the cosine of x. ",
"exp":"exp (x)\nCalculates an exponential function (e raised to the power of x). ",
"frexp":"frexp (x)\nReturns a two-element array containing the nominalized fraction and exponent of x. ",
"ldexp":"ldexp( x, exp)\nReturns the value of x times 2 to the power of exp. ",
"log":"log (x)\nCalculates the natural logarithm of x. ",
"log10":"log10 (x)\nCalculates the base 10 logarithm of x. ",
"sin":"sin (x)\nCalculates the sine of x. ",
"sqrt":"sqrt (x)\nReturns the square root of x. x must be positive. ",
"tan":"tan (x)\nCalculates the tangent of x. "}